// Code generated by go-bindata.
// sources:
// templates/default.bra.toml
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultBraToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x4d\x6b\xdc\x30\x10\x86\xef\x02\xfd\x87\xc1\xdb\x63\x9a\x6c\x0f\x7b\x29\xec\x21\xb4\x39\xa6\x84\x12\xe8\x61\x31\x46\x96\x46\xee\x90\x91\xb4\xe8\x23\xb1\xff\x7d\x91\x9c\xed\xc7\xee\xd6\x17\x63\xa1\xe7\xb1\xdf\x57\xe3\x43\x2c\xbe\x97\xc2\x50\x84\x3d\x1c\x7a\x29\xde\x54\xd6\x3f\x07\xc5\x0c\x7b\xc8\xb1\x20\x5c\x5e\x1b\xf8\x51\x37\x41\xdd\x94\xca\xf8\xd1\x50\x44\x9d\x43\x24\x4c\x27\xde\x50\x4c\x4d\x78\x05\x87\x0d\x7c\xfd\x43\x40\x0e\xd0\x98\x13\x8a\x73\x6e\x68\x77\x3b\x85\xee\x9c\xdf\xc0\xc3\x9c\xd1\x27\x0a\xfe\x6f\x92\x26\x1f\x22\xbe\x53\x94\xbb\x1b\xe8\x7c\x30\x38\xb8\x60\x0a\x63\xaa\x9a\x8b\x97\xe2\xac\xb9\x18\x04\x1b\x83\x5b\x3d\xe4\xa7\x93\x6a\xb0\xc4\xf8\xbf\x04\x1b\xf8\x8e\x13\xce\xc7\x04\x36\x44\x68\x00\xf9\x09\xd2\x11\x35\x59\xd2\xe0\x43\x26\xdb\xca\xb0\x81\x39\xbc\x0d\x69\x71\x4c\xfe\xa5\xfa\xac\xe2\x84\x67\x89\xbc\x1a\x19\xef\x0c\xa5\x7a\x87\x95\x69\xc2\xc5\x8d\x81\x49\xc3\x0a\x07\x5b\xdb\x86\x7f\xda\x1e\x0b\xb1\x19\x0c\xb2\x5a\x60\x0f\x9f\x76\xdb\xed\x95\xaf\x7d\x24\x4f\x4e\x31\x90\xcf\x18\x5f\x15\xd7\xf4\xcf\x91\xa6\x09\x23\x34\x01\xe0\x2b\xfa\x2c\x45\xdb\x10\xcb\x31\x0f\x99\x5c\x28\xb9\x29\xcf\x6d\xcf\xe4\x70\xad\x9e\x32\x14\x9f\x89\x6b\x0d\x1a\xe1\x85\x98\xa5\x98\xa2\xd2\x68\x0b\x0f\xf5\xf1\x5a\xe0\x75\x7e\x28\xb7\xf2\x70\xa6\x0c\xca\x1b\x18\xd1\xd6\x13\x5c\xc3\xf1\xf2\x2e\xd3\xce\xb4\x43\xb8\x36\x45\xbf\x65\x5f\x82\x73\xca\x9b\x76\xa8\xb1\x78\x29\x00\x0e\xdd\x14\xea\x10\xb4\x74\x5d\x7f\xb3\xae\xdd\xde\x7d\xb8\x7f\x7a\x1a\xbe\xdd\x3f\x3e\x74\xbd\x14\xbd\x14\x52\x1c\xd2\xe2\x75\x2f\x05\x53\xca\xe8\x07\x65\x4c\xfd\x11\xba\xcf\xbb\xed\x6e\xdb\x49\x11\xd1\x85\x8c\x17\xcb\xbf\x02\x00\x00\xff\xff\x13\x20\xe7\x67\x36\x03\x00\x00")

func templatesDefaultBraTomlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultBraToml,
		"templates/default.bra.toml",
	)
}

func templatesDefaultBraToml() (*asset, error) {
	bytes, err := templatesDefaultBraTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.bra.toml", size: 822, mode: os.FileMode(438), modTime: time.Unix(1563765696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.bra.toml": templatesDefaultBraToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.bra.toml": &bintree{templatesDefaultBraToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

