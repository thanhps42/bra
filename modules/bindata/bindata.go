// Code generated by go-bindata.
// sources:
// templates/default.bra.toml
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultBraToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\xc1\x6a\xdc\x30\x10\x86\xef\x06\xbf\xc3\xe0\xed\x31\x4d\xb6\x87\x5c\x0a\x7b\x08\x6d\x8e\x29\xa1\x04\x7a\x58\x8c\xd1\x5a\x23\x77\xc8\x68\xb4\x48\xa3\x64\xfd\xf6\x45\x72\x36\x4d\x77\xb7\xbe\x18\x0b\x7d\x9f\xfd\xff\x1a\x6f\x63\x96\xbe\x6d\x2c\x45\xd8\xc0\xb6\x6f\x9b\x57\xa3\xe3\xef\xc1\x30\xc3\x06\x34\x66\x84\xf3\x6b\x05\xbf\xca\x26\x28\x9b\x52\xde\x7d\xb6\x14\x71\xd4\x10\x09\xd3\x91\xb7\x14\x53\x15\x5e\xc0\x61\x05\xdf\xff\x12\xa0\x01\x2a\x73\x44\xf1\xa0\x15\xed\xae\xa7\xd0\x9d\xf2\x2b\xb8\x3f\x28\x4a\xa2\x20\x1f\x49\x9a\x24\x44\x7c\xa3\x48\xbb\x2b\xe8\x24\x58\x1c\x7c\xb0\x99\x31\x15\xcd\xd9\x4b\xf1\x30\x72\xb6\x08\x2e\x06\xbf\x78\x48\xa6\xa3\x6a\x70\xc4\xf8\xbf\x04\x2b\xf8\x89\x13\x1e\xf6\x09\x5c\x88\x50\x01\x92\x09\xd2\x1e\x47\x72\x34\x82\x04\x25\x57\xcb\x70\x81\x39\xbc\x0e\x69\xf6\x4c\xf2\x5c\x7c\xce\x70\xc2\x93\x44\x62\x76\x8c\x37\x96\x52\xb9\xc3\xc2\x54\xe1\xec\x77\x81\x69\x84\x05\x0e\xae\xb4\x0d\xff\xb4\xbd\xcb\xc4\x76\xb0\xc8\x66\x86\x0d\x7c\xb9\x5d\xaf\x2f\x7c\xed\x03\x09\x79\xc3\x40\xa2\x18\x5f\x0c\x97\xf4\x4f\x91\xa6\x09\x23\x54\x01\xe0\x0b\x8a\xb6\x4d\xdd\x10\xf3\x5e\x07\x25\x1f\xb2\x56\xe5\xa9\xed\x89\x3c\x2e\xd5\x93\x42\x16\x25\x2e\x35\x8c\x08\xcf\xc4\xdc\x36\x53\x34\x23\xba\xcc\x43\x79\xbc\x14\x78\x99\x1f\xd2\x5a\x1e\x1e\x48\xc1\x88\x85\x1d\xba\x72\x82\x4b\x38\x9e\xdf\x64\xa3\xb7\xf5\x10\x2e\x4d\xd1\xbb\xec\x5b\xf0\xde\x88\xad\x87\x1a\xb3\xb4\x0d\xc0\xb6\x9b\x42\x19\x02\x92\xa4\x86\xb9\xeb\xaf\x3e\xae\xd6\xcc\xef\x6b\xd7\x37\x9f\xee\x1e\x1f\x87\x1f\x77\x0f\xf7\x5d\xdf\x36\x7d\xdb\xb4\xcd\x36\xcd\x32\xf6\x6d\xc3\x94\x14\x65\x30\xd6\x96\xdf\xa3\xfb\x7a\xbb\xbe\x5d\x77\x6d\x13\xd1\x07\xc5\xb3\xe5\x3f\x01\x00\x00\xff\xff\x79\xc6\x61\xad\x4c\x03\x00\x00")

func templatesDefaultBraTomlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultBraToml,
		"templates/default.bra.toml",
	)
}

func templatesDefaultBraToml() (*asset, error) {
	bytes, err := templatesDefaultBraTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.bra.toml", size: 844, mode: os.FileMode(438), modTime: time.Unix(1563764973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.bra.toml": templatesDefaultBraToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"default.bra.toml": &bintree{templatesDefaultBraToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

